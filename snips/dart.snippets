# A valid snippet should starts with:
#
#        snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#        endsnippet
#
# Snippet options:
#
#        b - Beginning of line.
#        i - In-word expansion.
#        w - Word boundary.
#        r - Regular expression
#        e - Custom context snippet
#        A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#        snippet emitter "emitter properties" b
#        private readonly ${1} = new Emitter<$2>()
#        public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#        endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet stless_full
  class $1 extends StatelessWidget {
    const $1({
      super.key,
    });

    @override
    Widget build(BuildContext context) {
      return Container(
        $2
      );
    }
  }

snippet stful_full
  class $1 extends StatefulWidget {
    const $1({
      super.key,
    });

    @override
    State<$1> createState() => _$1State();
  }

  class _$1State extends State<$1> {
    @override
    void initState() {
      // Call super first.
      super.initState();
    }

    @override
    void didUpdateWidget($1 oldWidget) {
      // Call super first.
      super.didUpdateWidget(oldWidget);
    }

    @override
    void dispose() {
      // Call super last.
      super.dispose();
    }

    @override
    Widget build(BuildContext context) {
      return Container(
        $2
      );
    }
  }

snippet stacktrace
  print(StackTrace.current);

snippet dialog
  showDialog(
    context: context,
    builder: (BuildContext context) {
      return AlertDialog(
        title: const Text('Dialog title'),
        content: const Text('Dialog body'),
        actions: <Widget>[
          TextButton(
            style: TextButton.styleFrom(
              textStyle: Theme.of(context).textTheme.labelLarge,
            ),
            child: const Text('Disable'),
            onPressed: () {
              Navigator.of(context).pop();
            },
          ),
          TextButton(
            style: TextButton.styleFrom(
              textStyle: Theme.of(context).textTheme.labelLarge,
            ),
            child: const Text('Enable'),
            onPressed: () {
              Navigator.of(context).pop();
            },
          ),
        ],
      );
    },
  );

snippet platform_switch
  switch (defaultTargetPlatform) {
    case TargetPlatform.iOS:
    case TargetPlatform.macOS:
    case TargetPlatform.android:
    case TargetPlatform.fuchsia:
    case TargetPlatform.linux:
    case TargetPlatform.windows:
      $1
  }

snippet lorem
  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

snippet initState
	@override
	void initState() {
		// Call super first.
		super.initState();
	}

snippet didUpdateWidget
	@override
	void didUpdateWidget($1 oldWidget) {
		// Call super first.
		super.didUpdateWidget();
	}

snippet dispose
	@override
	void dispose() {
		// Call super last.
		super.dispose();
	}

snippet build
	@override
	Widget build(BuildContext context) {
		return $1;
	}

snippet createState
	@override
	State<$1> createState() => $1State();

snippet TextButton
  TextButton(
    onPressed: () {
      $1
    },
    child: $2,
  ),

snippet WidgetsApp
  WidgetsApp(
	color: Colors.red,
	localizationsDelegates: const <LocalizationsDelegate<dynamic>>[
	  DefaultMaterialLocalizations.delegate,
	],
	title: 'Example',
	home: $1,
  ),
